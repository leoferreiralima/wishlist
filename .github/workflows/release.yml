name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Extract tag name
        id: extract_tag
        run: echo "::set-output name=tag_name::$(echo ${GITHUB_REF#refs/tags/})"

      - name: Update version in build.gradle.kts
        run: |
          VERSION_TAG=${{ steps.extract_tag.outputs.tag_name }}
          sed -i "s/version = \".*\"/version = \"${VERSION_TAG}\"/" build.gradle.kts
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.8

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build --info

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wishlist:${{ steps.extract_tag.outputs.tag_name }}
            ${{ secrets.DOCKER_USERNAME }}/wishlist:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deploy:
    needs: publish
    runs-on: self-hosted
    steps:
      - name: Delete workspace directory
        run: rm -rf $GITHUB_WORKSPACE/*

      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            server
          sparse-checkout-cone-mode: false

      - name: Echo GitHub Workspace
        run: echo "GitHub workspace is located at $GITHUB_WORKSPACE"

      - name: Set up environment variables
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod" > $GITHUB_WORKSPACE/server/.env
          echo "SPRING_DATA_MONGODB_URI=${{ secrets.MONGO_DB_URI }}" >> $GITHUB_WORKSPACE/server/.env
          echo "SPRING_REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_WORKSPACE/server/.env
          echo "SPRING_REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_WORKSPACE/server/.env
          echo "SPRING_REDIS_USER=${{ secrets.REDIS_USER }}" >> $GITHUB_WORKSPACE/server/.env
          echo "SPRING_REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_WORKSPACE/server/.env
          echo "SPRING_REDIS_SSL_ENABLED=true" >> $GITHUB_WORKSPACE/server/.env
          echo "JAVA_OPTS=-Xmx300m" >> $GITHUB_WORKSPACE/server/.env

      - name: Pull image from docker hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/wishlist:latest
#      - name: Remove docker container
#        run: docker rm -f wishlist-app || true
#      - name: Run docker container
#        run: |
#          docker run -d -p 8000:8000 \
#          -e SPRING_PROFILES_ACTIVE=prod \
#          -e SPRING_DATA_MONGODB_URI='${{secrets.MONGO_DB_URI}}' \
#          -e SPRING_REDIS_HOST='${{secrets.REDIS_HOST}}' \
#          -e SPRING_REDIS_PORT='${{secrets.REDIS_PORT}}' \
#          -e SPRING_REDIS_USER='${{secrets.REDIS_USER}}' \
#          -e SPRING_REDIS_PASSWORD='${{secrets.REDIS_PASSWORD}}' \
#          -e SPRING_REDIS_SSL_ENABLED='true' \
#          --name wishlist-app ${{ secrets.DOCKER_USERNAME }}/wishlist
      - name: Start Containers
        run: |
          docker-compose \
          -f $GITHUB_WORKSPACE/server/docker-compose.yaml \
          up -d \
          --force-recreate \
          --remove-orphans \
          --build
